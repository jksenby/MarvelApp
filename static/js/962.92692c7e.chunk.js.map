{"version":3,"file":"static/js/962.92692c7e.chunk.js","mappings":"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","sources":["components/errorMessage/ErrorMessage.js","components/ErrorBoundary/ErrorBoundary.js","components/charInfo/CharInfo.js","components/charList/CharList.js","components/randomChar/RandomChar.js","components/charSearchForm/CharSearchForm.js","components/pages/MainPage.js","services/MarvelService.js","hooks/http.hooks.js","components/skeleton/Skeleton.js","utlis/setContent.js"],"sourcesContent":["import img from './error.gif'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img style={{display: 'block', width: '250px', height: '250px', objectFit: 'contain',\r\n        margin: '0 auto'}}          \r\n        src={img} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import { Component } from \"react\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nclass ErrorBoundary extends Component {\r\n  state = {\r\n    error: false,\r\n  };\r\n\r\n  componentDidCatch(error, errorInfo) {\r\n    this.setState({\r\n      error: true,\r\n    });\r\n  }\r\n\r\n  render() {\r\n    if (this.state.error) {\r\n      return <ErrorMessage />;\r\n    }\r\n\r\n    return this.props.children;\r\n  }\r\n}\r\n\r\nexport default ErrorBoundary;\r\n","import { useState, useEffect } from \"react\";\nimport useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utlis/setContent\";\n\nimport \"./charInfo.scss\";\n\nconst CharInfo = (props) => {\n  const [char, setChar] = useState(null);\n\n  useEffect(() => {\n    updateChar();\n    // eslint-disable-next-line\n  }, [props.charId]);\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    const { charId } = props;\n    if (!charId) {\n      return;\n    }\n\n    clearError();\n\n    onCharLoaded();\n    getCharacter(charId)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return <div className=\"char__info\">{setContent(process, View, char)}</div>;\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki, comics } = data;\n  let imgStyle = { objectFit: \"cover\" };\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    imgStyle = { objectFit: \"unset\" };\n  }\n  return (\n    <>\n      <div className=\"char__basics\">\n        <img src={thumbnail} alt={name} style={imgStyle} />\n        <div>\n          <div className=\"char__info-name\">{name}</div>\n          <div className=\"char__btns\">\n            <a href={homepage} className=\"button button__main\">\n              <div className=\"inner\">homepage</div>\n            </a>\n            <a href={wiki} className=\"button button__secondary\">\n              <div className=\"inner\">Wiki</div>\n            </a>\n          </div>\n        </div>\n      </div>\n      <div className=\"char__descr\">{description}</div>\n      <div className=\"char__comics\">Comics:</div>\n      <ul className=\"char__comics-list\">\n        {comics.length > 0 ? null : \"There is no comicses with this character\"}\n        {comics.map((item, i) => {\n          // eslint-disable-next-line\n          if (i > 9) return;\n          return (\n            <li key={i} className=\"char__comics-item\">\n              {item.name}\n            </li>\n          );\n        })}\n      </ul>\n    </>\n  );\n};\n\nexport default CharInfo;\n","import { useState, useEffect, useRef, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { CSSTransition, TransitionGroup } from \"react-transition-group\";\nimport Spinner from \"../spinner/Spinner\";\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\n\nimport useMarvelService from \"../../services/MarvelService\";\n\nimport \"./charList.scss\";\n\nconst setContent = (process, Component, newItemLoading) => {\n  switch (process) {\n    case \"waiting\":\n      return <Spinner />;\n    case \"loading\":\n      return newItemLoading ? <Component /> : <Spinner />;\n    case \"confirmed\":\n      return <Component />;\n    case \"error\":\n      return <ErrorMessage />;\n    default:\n      throw new Error(\"Unexpected process state\");\n  }\n};\n\nconst CharList = (props) => {\n  const [charList, setCharList] = useState([]);\n  const [newItemLoading, setnewItemLoading] = useState(false);\n  const [offset, setOffset] = useState(210);\n  const [charEnded, setCharEnded] = useState(false);\n\n  const { getAllCharacters, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    onRequest(offset, true);\n    // eslint-disable-next-line\n  }, []);\n\n  const onRequest = (offset, initial) => {\n    initial ? setnewItemLoading(false) : setnewItemLoading(true);\n    getAllCharacters(offset)\n      .then(onCharListLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  const onCharListLoaded = async (newCharList) => {\n    let ended = false;\n    if (newCharList.length < 9) {\n      ended = true;\n    }\n    setCharList([...charList, ...newCharList]);\n    setnewItemLoading(false);\n    setOffset(offset + 9);\n    setCharEnded(ended);\n  };\n\n  const itemRefs = useRef([]);\n\n  const focusOnItem = (id) => {\n    itemRefs.current.forEach((item) =>\n      item.classList.remove(\"char__item_selected\")\n    );\n    itemRefs.current[id].classList.add(\"char__item_selected\");\n    itemRefs.current[id].focus();\n  };\n\n  function renderItems(arr) {\n    const items = arr.map((item, i) => {\n      let imgStyle = { objectFit: \"cover\" };\n      if (\n        item.thumbnail ===\n        \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n      ) {\n        imgStyle = { objectFit: \"unset\" };\n      }\n\n      return (\n        <CSSTransition key={item.id} timeout={500} classNames=\"char__item\">\n          <li\n            className=\"char__item\"\n            tabIndex={0}\n            ref={(el) => (itemRefs.current[i] = el)}\n            onClick={() => {\n              props.onCharSelected(item.id);\n              focusOnItem(i);\n            }}\n            onKeyPress={(e) => {\n              if (e.key === \" \" || e.key === \"Enter\") {\n                props.onCharSelected(item.id);\n                focusOnItem(i);\n              }\n            }}\n          >\n            <img src={item.thumbnail} alt={item.name} style={imgStyle} />\n            <div className=\"char__name\">{item.name}</div>\n          </li>\n        </CSSTransition>\n      );\n    });\n\n    return (\n      <ul className=\"char__grid\">\n        <TransitionGroup component={null}>{items}</TransitionGroup>\n      </ul>\n    );\n  }\n\n  const elements = useMemo(() => {\n    return setContent(process, () => renderItems(charList), newItemLoading);\n    // eslint-disable-next-line\n  }, [process]);\n\n  return (\n    <div className=\"char__list\">\n      {elements}\n      <button\n        disabled={newItemLoading}\n        style={{ display: charEnded ? \"none\" : \"block\" }}\n        className=\"button button__main button__long\"\n        onClick={() => onRequest(offset)}\n      >\n        <div className=\"inner\">load more</div>\n      </button>\n    </div>\n  );\n};\n\nCharList.propTypes = {\n  onCharSelected: PropTypes.func.isRequired,\n};\n\nexport default CharList;\n","import useMarvelService from \"../../services/MarvelService\";\nimport setContent from \"../../utlis/setContent\";\n\nimport \"./randomChar.scss\";\nimport mjolnir from \"../../resources/img/mjolnir.png\";\nimport { useState, useEffect } from \"react\";\n\nconst RandomChar = (props) => {\n  const [char, setChar] = useState({});\n\n  const { getCharacter, clearError, process, setProcess } = useMarvelService();\n\n  useEffect(() => {\n    updateChar();\n    const timerId = setInterval(updateChar, 6000);\n\n    return () => {\n      clearInterval(timerId);\n    };\n  }, []);\n  const onCharLoaded = (char) => {\n    setChar(char);\n  };\n\n  const updateChar = () => {\n    clearError();\n    const id = Math.floor(Math.random() * (1011400 - 1011000) + 1011000);\n    getCharacter(id)\n      .then(onCharLoaded)\n      .then(() => setProcess(\"confirmed\"));\n  };\n\n  return (\n    <div className=\"randomchar\">\n      {setContent(process, View, char)}\n      <div className=\"randomchar__static\">\n        <p className=\"randomchar__title\">\n          Random character for today!\n          <br />\n          Do you want to get to know him better?\n        </p>\n        <p className=\"randomchar__title\">Or choose another one</p>\n        <button className=\"button button__main\" onClick={updateChar}>\n          <div className=\"inner\">try it</div>\n        </button>\n        <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\" />\n      </div>\n    </div>\n  );\n};\n\nconst View = ({ data }) => {\n  const { name, description, thumbnail, homepage, wiki } = data;\n  let className = \"randomchar__img\";\n\n  if (\n    thumbnail ===\n    \"http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg\"\n  ) {\n    className += \" not__found\";\n  }\n  return (\n    <div className=\"randomchar__block\">\n      <img src={thumbnail} alt=\"Random character\" className={className} />\n      <div className=\"randomchar__info\">\n        <p className=\"randomchar__name\">{name}</p>\n        <p className=\"randomchar__descr\">\n          {description\n            ? description.length > 200\n              ? description.substring(0, 200).trim() + \"...\"\n              : description\n            : \"Description is not found\"}\n        </p>\n        <div className=\"randomchar__btns\">\n          <a href={homepage} className=\"button button__main\">\n            <div className=\"inner\">homepage</div>\n          </a>\n          <a href={wiki} className=\"button button__secondary\">\n            <div className=\"inner\">Wiki</div>\n          </a>\n        </div>\n      </div>\n    </div>\n  );\n};\nexport default RandomChar;\n","import { useState } from \"react\";\r\nimport {\r\n  Formik,\r\n  Form,\r\n  Field,\r\n  ErrorMessage as FormikErrorMessage,\r\n} from \"formik\";\r\nimport * as Yup from \"yup\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nimport useMarvelService from \"../../services/MarvelService\";\r\nimport ErrorMessage from \"../errorMessage/ErrorMessage\";\r\n\r\nimport \"./charSearchForm.scss\";\r\n\r\nconst CharSearchForm = () => {\r\n  const [char, setChar] = useState(null);\r\n  const { getCharacterByName, clearError, process, setProcess } =\r\n    useMarvelService();\r\n\r\n  const onCharLoaded = (char) => {\r\n    setChar(char);\r\n  };\r\n\r\n  const updateChar = (name) => {\r\n    clearError();\r\n\r\n    getCharacterByName(name)\r\n      .then(onCharLoaded)\r\n      .then(() => setProcess(\"confirmed\"));\r\n  };\r\n\r\n  const errorMessage =\r\n    process === \"error\" ? (\r\n      <div className=\"char__search-critical-error\">\r\n        <ErrorMessage />\r\n      </div>\r\n    ) : null;\r\n  const results = !char ? null : char.length > 0 ? (\r\n    <div className=\"char__search-wrapper\">\r\n      <div className=\"char__search-success\">\r\n        There is! Visit {char[0].name} page?\r\n      </div>\r\n      <Link\r\n        to={`/characters/${char[0].id}`}\r\n        className=\"button button__secondary\"\r\n      >\r\n        <div className=\"inner\">To page</div>\r\n      </Link>\r\n    </div>\r\n  ) : (\r\n    <div className=\"char__search-error\">\r\n      The character was not found. Check the name and try again\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <div className=\"char__search-form\">\r\n      <Formik\r\n        initialValues={{\r\n          charName: \"\",\r\n        }}\r\n        validationSchema={Yup.object({\r\n          charName: Yup.string().required(\"This field is required\"),\r\n        })}\r\n        onSubmit={({ charName }) => {\r\n          updateChar(charName);\r\n        }}\r\n      >\r\n        <Form>\r\n          <label className=\"char__search-label\" htmlFor=\"charName\">\r\n            Or find a character by name:\r\n          </label>\r\n          <div className=\"char__search-wrapper\">\r\n            <Field\r\n              id=\"charName\"\r\n              name=\"charName\"\r\n              type=\"text\"\r\n              placeholder=\"Enter name\"\r\n            />\r\n            <button\r\n              type=\"submit\"\r\n              className=\"button button__main\"\r\n              disabled={process === \"loading\"}\r\n            >\r\n              <div className=\"inner\">find</div>\r\n            </button>\r\n          </div>\r\n          <FormikErrorMessage\r\n            component=\"div\"\r\n            className=\"char__search-error\"\r\n            name=\"charName\"\r\n          />\r\n        </Form>\r\n      </Formik>\r\n      {results}\r\n      {errorMessage}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default CharSearchForm;\r\n","import ErrorBoundary from \"../ErrorBoundary/ErrorBoundary\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharList from \"../charList/CharList\";\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharSearchForm from \"../charSearchForm/CharSearchForm\";\r\n\r\nimport { useState } from \"react\";\r\n\r\nimport decoration from \"../../resources/img/vision.png\";\r\n\r\nconst MainPage = () => {\r\n  const [selectedChar, setCharacter] = useState(null);\r\n\r\n  const onCharSelected = (id) => {\r\n    setCharacter(id);\r\n  };\r\n\r\n  return (\r\n    <>\r\n      <ErrorBoundary>\r\n        <RandomChar />\r\n      </ErrorBoundary>\r\n      <div className=\"char__content\">\r\n        <ErrorBoundary>\r\n          <CharList onCharSelected={onCharSelected} />\r\n        </ErrorBoundary>\r\n        <div>\r\n          <ErrorBoundary>\r\n            <CharInfo charId={selectedChar} />\r\n          </ErrorBoundary>\r\n          <ErrorBoundary>\r\n            <CharSearchForm />\r\n          </ErrorBoundary>\r\n        </div>\r\n      </div>\r\n      <img className=\"bg-decoration\" src={decoration} alt=\"vision\" />\r\n    </>\r\n  );\r\n};\r\n\r\nexport default MainPage;\r\n","import { useHttp } from \"../hooks/http.hooks\";\r\n\r\nconst useMarvelService = () => {\r\n  const { request, clearError, process, setProcess } = useHttp();\r\n\r\n  const _apiBase = \"https://gateway.marvel.com:443/v1/public/\";\r\n  // ЗДЕСЬ БУДЕТ ВАШ КЛЮЧ, ЭТОТ КЛЮЧ МОЖЕТ НЕ РАБОТАТЬ\r\n  const _apiKey = \"apikey=c5d6fc8b83116d92ed468ce36bac6c62\";\r\n  const _baseOffset = 210;\r\n\r\n  const getAllCharacters = async (offset = _baseOffset) => {\r\n    const res = await request(\r\n      `${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  // Вариант модификации готового метода для поиска по имени.\r\n  // Вызывать его можно вот так: getAllCharacters(null, name)\r\n\r\n  // const getAllCharacters = async (offset = _baseOffset, name = '') => {\r\n  //     const res = await request(`${_apiBase}characters?limit=9&offset=${offset}${name ? `&name=${name}` : '' }&${_apiKey}`);\r\n  //     return res.data.results.map(_transformCharacter);\r\n  // }\r\n\r\n  // Или можно создать отдельный метод для поиска по имени\r\n\r\n  const getCharacterByName = async (name) => {\r\n    const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n    return res.data.results.map(_transformCharacter);\r\n  };\r\n\r\n  const getCharacter = async (id) => {\r\n    const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n    return _transformCharacter(res.data.results[0]);\r\n  };\r\n\r\n  const getAllComics = async (offset = 0) => {\r\n    const res = await request(\r\n      `${_apiBase}comics?orderBy=issueNumber&limit=8&offset=${offset}&${_apiKey}`\r\n    );\r\n    return res.data.results.map(_transformComics);\r\n  };\r\n\r\n  const getComic = async (id) => {\r\n    const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n    return _transformComics(res.data.results[0]);\r\n  };\r\n\r\n  const _transformCharacter = (char) => {\r\n    return {\r\n      id: char.id,\r\n      name: char.name,\r\n      description: char.description\r\n        ? `${char.description.slice(0, 210)}...`\r\n        : \"There is no description for this character\",\r\n      thumbnail: char.thumbnail.path + \".\" + char.thumbnail.extension,\r\n      homepage: char.urls[0].url,\r\n      wiki: char.urls[1].url,\r\n      comics: char.comics.items,\r\n    };\r\n  };\r\n\r\n  const _transformComics = (comics) => {\r\n    return {\r\n      id: comics.id,\r\n      title: comics.title,\r\n      description: comics.description || \"There is no description\",\r\n      pageCount: comics.pageCount\r\n        ? `${comics.pageCount} p.`\r\n        : \"No information about the number of pages\",\r\n      thumbnail: comics.thumbnail.path + \".\" + comics.thumbnail.extension,\r\n      language: comics.textObjects[0]?.language || \"en-us\",\r\n      price: comics.prices[0].price\r\n        ? `${comics.prices[0].price}$`\r\n        : \"not available\",\r\n    };\r\n  };\r\n\r\n  return {\r\n    clearError,\r\n    getAllCharacters,\r\n    getCharacterByName,\r\n    getCharacter,\r\n    getAllComics,\r\n    getComic,\r\n    process,\r\n    setProcess,\r\n  };\r\n};\r\n\r\nexport default useMarvelService;\r\n","import { useState, useCallback } from \"react\";\r\n\r\nexport const useHttp = () => {\r\n  const [process, setProcess] = useState(\"waiting\");\r\n\r\n  const request = useCallback(\r\n    async (\r\n      url,\r\n      method = \"GET\",\r\n      body = null,\r\n      headers = { \"Content-Type\": \"application/json\" }\r\n    ) => {\r\n      setProcess(\"loading\");\r\n      try {\r\n        const response = await fetch(url, { method, body, headers });\r\n\r\n        if (!response.ok)\r\n          throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n\r\n        const data = await response.json();\r\n\r\n        return data;\r\n      } catch (e) {\r\n        setProcess(\"error\");\r\n        throw e;\r\n      }\r\n    },\r\n    []\r\n  );\r\n\r\n  const clearError = useCallback(() => {\r\n    setProcess(\"loading\");\r\n  }, []);\r\n\r\n  return { request, clearError, process, setProcess };\r\n};\r\n","import './skeleton.scss';\n\nconst Skeleton = () => {\n    return (\n        <>\n            <p className=\"char__select\">Please select a character to see information</p>\n            <div className=\"skeleton\">\n                <div className=\"pulse skeleton__header\">\n                    <div className=\"pulse skeleton__circle\"></div>\n                    <div className=\"pulse skeleton__mini\"></div>\n                </div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n                <div className=\"pulse skeleton__block\"></div>\n            </div>\n        </>\n    )\n}\n\nexport default Skeleton;","import Spinner from \"../components/spinner/Spinner\";\r\nimport ErrorMessage from \"../components/errorMessage/ErrorMessage\";\r\nimport Skeleton from \"../components/skeleton/Skeleton\";\r\n\r\nconst setContent = (process, Component, data) => {\r\n  switch (process) {\r\n    case \"waiting\":\r\n      return <Skeleton />;\r\n    case \"loading\":\r\n      return <Spinner />;\r\n    case \"confirmed\":\r\n      return <Component data={data} />;\r\n    case \"error\":\r\n      return <ErrorMessage />;\r\n    default:\r\n      throw new Error(\"Unexpected process state\");\r\n  }\r\n};\r\n\r\nexport default setContent;\r\n"],"names":["_jsx","style","display","width","height","objectFit","margin","src","img","alt","ErrorBoundary","_Component","_inherits","_super","_createSuper","_this","_classCallCheck","_len","arguments","length","args","Array","_key","call","apply","concat","state","error","_createClass","key","value","errorInfo","this","setState","ErrorMessage","props","children","Component","View","_ref","data","name","description","thumbnail","homepage","wiki","comics","imgStyle","_jsxs","_Fragment","className","href","map","item","i","_useState","useState","_useState2","_slicedToArray","char","setChar","useEffect","updateChar","charId","_useMarvelService","useMarvelService","getCharacter","clearError","process","setProcess","onCharLoaded","then","setContent","charList","setCharList","_useState3","_useState4","newItemLoading","setnewItemLoading","_useState5","_useState6","offset","setOffset","_useState7","_useState8","charEnded","setCharEnded","getAllCharacters","onRequest","initial","onCharListLoaded","_x","_asyncToGenerator","_regeneratorRuntime","mark","_callee","newCharList","ended","wrap","_context","prev","next","_toConsumableArray","stop","itemRefs","useRef","focusOnItem","id","current","forEach","classList","remove","add","focus","elements","useMemo","Spinner","Error","arr","items","CSSTransition","timeout","classNames","tabIndex","ref","el","onClick","onCharSelected","onKeyPress","e","TransitionGroup","component","renderItems","disabled","substring","trim","timerId","setInterval","clearInterval","Math","floor","random","mjolnir","getCharacterByName","errorMessage","results","Link","to","Formik","initialValues","charName","validationSchema","Yup","required","onSubmit","Form","htmlFor","Field","type","placeholder","FormikErrorMessage","selectedChar","setCharacter","RandomChar","CharList","CharInfo","CharSearchForm","decoration","_ref2","_ref3","_ref4","_ref5","_useHttp","request","useCallback","url","method","body","headers","response","_args","undefined","fetch","sent","ok","status","json","abrupt","t0","useHttp","_apiBase","_apiKey","_transformCharacter","slice","path","extension","urls","_transformComics","_comics$textObjects$","title","pageCount","language","textObjects","price","prices","res","_callee2","_context2","_x2","_callee3","_context3","getAllComics","_callee4","_args4","_context4","getComic","_x3","_callee5","_context5","Skeleton"],"sourceRoot":""}